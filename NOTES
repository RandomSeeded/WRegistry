What should the thing look like?

We need to have two entirely separate sites, one for the couple, one for the guest?

Is that true?

What's the difference between them?

Two different things we can do here:
1. We can have the individual components be aware of whether they're couple or guest and render (or not) accordingly
2. We can have the parent components be aware of whether they're couple or guest or choose to include their children (or not) accordingly
3. We can have two entirely separate parent container components, one for couple, one for guest. I think this is probably the cleanest.

NOTE: what happens if we want to have a parent of that parent component? Then it needs to know its own mode. That sucks. 

What DOES the structure here look like? Can we make it equivalent for both couple and guest? Yeah, probably.

The difference will be in the inclusion or exclusion of certain additional elements for one that does not exist for the other. Examples of this are:

- Send wishlist to guests
- Add additional guests
- Create personalized note

Any functionality we need from a guest that we don't want from the couple? 

Shouldn't be, nope. Should just be a strict subset, at least for now.

WHAT DOES SITE LOOK LIKE FROM COUPLE PERSPECTIVE?

ABSOLUTELY MVP CORE FUNCTIONALITY:

For couple:
1. Add item (description only)
2. Add guest (send guest an email link)
3. Login/logout
4. Basic styling

For guest:
1. Ability to view
2. Ability to cross off

VISUALS:
Add item thing should look like:
Description box, button to add
This should always be below the list of things already added
There should be an edit / delete button as well.

-----------

Front page:

1. Login button needs to exist for people who already have accounts
2. At some point you may want a forgot password button. Do I really need that already? That seems like not-a-v0.
3. I think the search-for-a-registry functionality is not essential. 
4. What is essential is the create a registry button

SO

Front page:
1. Login
2. Create a registry
3. (Maybe eventually) - find a registry.
Yeah fuck find a registry, as long as you have email functionality that will be good enough

What will the create a registry button DO? How do we want it to work?

I think you basically need a router. That should basically be a whole separate page.

OK plan is:
1. Set up routing
- we need to go from front page -> edit the registry page
2. Set up auth
- we will log into server
- we will then request the current items in the registry and render em

------------

REDUX STUFF:

Important things:
- mapStateToProps: turns the STATE into PROPS which are passed and bound to the component
- we specify the properties we want to pass in as props to those lil guys
- then when state changes, props change, and we're happy
- mapDispatchToProps: receives dispatch methods (from where?) and turns those into props which are passed to the components. Here we receive a dispatch and turn it into an onClick (for links). 
- I still don't fully understand that one.
- OK so basically what is is the following:
- You're constructing the props object
- You can put things on there one of two ways:
- 1) from the state (mapStateToProps)
- 2) you can give it access to call dispatch (trigger state update) (mapDispatchToProps)

Presentation components:
- those that have render

Container components:
- created via connect(mapThing1, mapThing2)(ComponentThatYou'reWrapping)

Can you have a thing that contains TWO components? Nah you probably create two container components and wrap em in a presentation component







